//test server https://discord.gg/qgVchxV

var fs = require('fs');
var cfg = JSON.parse(fs.readFileSync('auth.json', 'utf8'));
var r6api = require('r6api')({
  email: cfg.r6sapi_email,
  password: cfg.r6sapi_pass
});

var support_id = '125634283258773504';
var support_dm = '417082480365928448';
var help_message = fs.readFileSync('help.txt', 'utf8');

var cooldown = 24*3600*1000; 
var rank_game = [
  '–ë–µ–∑ —Ä–∞–Ω–≥–∞',
  '–ú–µ–¥—å 4',
  '–ú–µ–¥—å 3',
  '–ú–µ–¥—å 2',
  '–ú–µ–¥—å 1',
  '–ë—Ä–æ–Ω–∑–∞ 4',
  '–ë—Ä–æ–Ω–∑–∞ 3',
  '–ë—Ä–æ–Ω–∑–∞ 2',
  '–ë—Ä–æ–Ω–∑–∞ 1',
  '–°–µ—Ä–µ–±—Ä–æ 4',
  '–°–µ—Ä–µ–±—Ä–æ 3',
  '–°–µ—Ä–µ–±—Ä–æ 2',
  '–°–µ—Ä–µ–±—Ä–æ 1',
  '–ó–æ–ª–æ—Ç–æ 4',
  '–ó–æ–ª–æ—Ç–æ 3',
  '–ó–æ–ª–æ—Ç–æ 2',
  '–ó–æ–ª–æ—Ç–æ 1',
  '–ü–ª–∞—Ç–∏–Ω–∞ 3',
  '–ü–ª–∞—Ç–∏–Ω–∞ 2',
  '–ü–ª–∞—Ç–∏–Ω–∞ 1',
  '–ê–õ–ú–ê–ó'
];

var redis = require('redis').createClient(process.env.REDIS_URL);

//–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Discord.js

var Discord = require('discord.js');
var bot = new Discord.Client();

//–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express

var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var router = express.Router();

//var index = require('./routes/index');
//var users = require('./routes/users');

var app = express();

//–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

function ConstSett() {
  this.id = {};
  this.id.diamond_role = "";
  this.id.platinum_role = "";
  this.id.gold_role = "";             //–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≥–æ–≤–Ω–æ
  this.id.silver_role = "";
  this.id.bronze_role = "";
  this.id.copper_role = "";
  this.id.unranked_role = "";
  this.id.logs_channel = "";
}

function dlog(id, person, title, content) {
  var msg = {embed: {
    color: 3768301,
    author: {
      name: person
    },
    title: title,
    description: content,
    timestamp: new Date(),
    footer: {
      icon_url: bot.user.avatarURL
    }
  }}
  try {
    bot.channels.find('id', id).send(msg);
  } catch (err) {
    console.log('[dlog failed]');
    console.log(msg);
  }
}

const checkRank = (msg, ubi_id, ids) => {
  return new Promise(function(resolve, reject) {
    r6api.getRanks(ubi_id)    
    .then(result => {      
      let rank = result[0].emea.rank;
      let roles = msg.channel.guild.roles;
      let diamond = roles.find('id', ids.diamond_role);
      let plat = roles.find('id', ids.platinum_role);
      let gold = roles.find('id', ids.gold_role);
      let silver = roles.find('id', ids.silver_role);
      let bronze = roles.find('id', ids.bronze_role);
      let copper = roles.find('id', ids.copper_role);
      let unranked = roles.find('id', ids.unranked_role);
      let user = msg.member;
      user.removeRoles([diamond, plat, gold, silver, bronze, copper, unranked], '–°–Ω–∏–º–∞—é —Ä–∞–Ω–≥ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º...').then(user => {
        if (diamond!=null & rank == 20) {
          user.addRole(diamond, '... —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
        } else if (plat!=null & rank>=17 & rank<20) {
          user.addRole(plat, '... —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
        } else if (gold!=null & rank>=13 & rank<17) {
          user.addRole(gold, '... —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
        } else if (silver!=null & rank>=9 & rank<13) {
          user.addRole(silver, '... —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
        } else if (bronze!=null & rank>=5 & rank<9) {
          user.addRole(bronze, '... —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
        } else if (copper!=null & rank>=1 & rank<5) {
          user.addRole(copper, '... —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
        } else if (unranked!=null & rank == 0) {
          user.addRole(unranked, '... —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
        }
      })
      .catch(err => {
        reject('–Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
      });
      resolve(rank);
      })
    .catch(err => {
      reject('–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ r6db');
    })
  })
}

console.log('[Start]');

//–∑–∞–ø—É—Å–∫ –≤–µ–±-–º–æ—Ä–¥—ã

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

// uncomment after placing your favicon in /public
app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', router);
//app.use('/users', users);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

router.get('/', function(req, res, next) {
  res.render('index', { title: 'R6Rutils', comeback: ''});
});

router.get('/admin/:pass', function(req, res, next) {
  console.log('[Web] Requesting admin panel: '+req.params.pass);
  redis.get('pass_'+req.params.pass, function(err, reply) {
    var guild_id = reply;
    if (guild_id) {
      redis.get('guild_'+guild_id, function(err, reply) {
        var settings = JSON.parse(reply);
        dlog(settings.id.logs_channel,'IP '+req.get('X-Forwarded-For'), '–î–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±', 'https://r6rutils.herokuapp.com/admin/'+req.params.pass);

        let guild = bot.guilds.find('id', guild_id);
        var roles_list = guild.roles.array();
        var channels_list = guild.channels.filterArray(chl => chl.type == 'text');
        //for (var i=0; i < roles_list.length; i++) {
        //  select+='<option value="'+i+'">'+(i+1)+'. '+i].name+'</option>';
        //}
        res.render('admin', { title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '+guild.name, roles: roles_list, channels: channels_list, settings: settings});
    

      })
    } else {
      res.redirect('/');
    }
  })
})

router.post('/admin/:pass', function(req, res) {
  console.log('[Web] Posting to admin panel: '+req.params.pass);
  redis.get('pass_'+req.params.pass, function(err, reply) {
    var guild_id = reply;
    if (guild_id) {
        let guild = bot.guilds.find('id', guild_id);
        var roles_list = guild.roles.array();
        let settings = new ConstSett();

        //console.log(req.body);
        
        settings.id.diamond_role = req.body.diamond;
        settings.id.platinum_role = req.body.platinum;
        settings.id.gold_role = req.body.gold;
        settings.id.silver_role = req.body.silver;
        settings.id.bronze_role = req.body.bronze;
        settings.id.copper_role = req.body.copper;
        settings.id.unranked_role = req.body.unranked;
        settings.id.logs_channel = req.body.logs;

        redis.set('guild_'+guild_id, JSON.stringify(settings));

        res.render('index', { title: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', comeback: '/admin/'+req.params.pass })
        //res.redirect('/admin/'+req.params.pass);
    } else {
      res.redirect('/');
    }
  })
})

module.exports = app;

//–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

bot.on('ready', () => {
  console.log('[Bot started]');
  bot.user.setPresence({
    status: 'online',
    game: {
      name: '–õ–° –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ –±–æ—Ç—É',
      type: 'WATCHING'
    }
  });
});

bot.on('guildCreate', guild => {
  let pass = Math.random().toString(36).substring(2, 15);
  redis.set("pass_"+pass, guild.id);
  redis.set("guild_"+guild.id, JSON.stringify(new ConstSett()))
  guild.owner.send("https://r6rutils.herokuapp.com/admin/"+pass+" - —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞, –¥–µ—Ä–∂–∏—Ç–µ –µ–µ –≤ —Å–µ–∫—Ä–µ—Ç–µ");
});

bot.on('message', message => {
  if (message.author.bot) {return;}
  //console.log(message.content);
  if ((message.channel.type == 'dm' || message.channel.type == 'group') && message.author.id == support_id) {
    //let msg = message.content.replace(/\s{2,}/g, ' ').split(' ');
    let dm = bot.users.find('id', message.content.slice(0, 18));
    //console.log(msg[0]);
    //console.log(dm);
    if (dm) {dm.send('–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ('+message.author.username+'#'+message.author.discriminator+'):\n\n'+message.content.slice(19)).then(msg => {
      message.react('üÜó');
    });}
    return;
  } else if (message.channel.type == 'dm' || message.channel.type == 'group') {
    if (message.content.startsWith('$support')) {
      let dm = bot.users.find('id', support_id);
      //console.log(dm)
      if (dm) {dm.send(message.author.id+'\n'+message.author.username+'#'+message.author.discriminator+'\n\n'+message.content.slice(9)).then(msg => {
        message.react('üÜó');
      });}
    } else {message.channel.send(help_message);}
    return;
  }

  if (!message.author.bot & message.guild!=undefined & message.content.startsWith('$rank')) {
    var nick = message.content.replace(/\s{2,}/g, ' ').split(' ')[1];
    console.log('[Registration] Start.Discord: '+message.author.username+'#'+message.author.discriminator+', Ubi nick: '+nick);
    redis.get('guild_'+message.guild.id, function(err, reply) {
      redis.get('guild_'+message.guild.id, function(err, reply) {
        let settings = JSON.parse(reply);
        var ids = settings.id;
        var prefix = settings.prefix;
        redis.get('user_'+message.author.id, function(err, reply) {
          try {
            let user = JSON.parse(reply);
            var last_update = user.last_update;
            var ubisoft_id = user.ubisoft_id;
            var can_update = new Date().getTime() - last_update > cooldown;
          } catch (err) {
            console.log('[Registration] New User');
            var new_user = true;
          }
          if (!nick && new_user) {
            message.reply('–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∏–∫!\n\n*–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - –õ–° –±–æ—Ç–∞*');
          } else if (new_user) {
            console.log('[Registration] Searching at r6db.com');
            r6api.findByName(nick)
            .then(result => {
              let user = {
                "ubisoft_id": result[0].id,
                "last_update": new Date().getTime()
              } 
              redis.set('user_'+message.author.id, JSON.stringify(user));

              checkRank(message, result[0].id, ids).then(result => {
                dlog(ids.logs_channel, message.author.username+'#'+message.author.discriminator, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', '–ü—Ä–æ—Ñ–∏–ª—å [r6db](https://r6db.com/player/'+user.ubisoft_id+')\nUser id: '+message.author.id);
                message.reply('–≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: `'+rank_game[result]+'`');
              })
              .catch(reason => {
                message.reply('–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü—Ä–∏—á–∏–Ω–∞: **'+reason+'**\n\n*–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - –õ–° –±–æ—Ç–∞*');
              });

            })
            .catch(reject => {
              message.reply('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–Ω–µ–π–º–æ–º '+nick+' –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n*–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - –õ–° –±–æ—Ç–∞*');
              console.log(reject);
            });
          } else if (can_update) {
            console.log('[Registration] Updating '+ubisoft_id);

            let user = {
              "ubisoft_id": ubisoft_id,
              "last_update": new Date().getTime()
            }
            redis.set('user_'+message.author.id, JSON.stringify(user));

            checkRank(message, ubisoft_id, ids).then(result => {
              dlog(ids.logs_channel, message.author.username+'#'+message.author.discriminator, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω', '–ü—Ä–æ—Ñ–∏–ª—å [r6db](https://r6db.com/player/'+user.ubisoft_id+')\nUser id: '+message.author.id);
              message.reply('–≤—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å, –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: `'+rank_game[result]+'`');
            })
            .catch(reason => {
              message.reply('–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü—Ä–∏—á–∏–Ω–∞: **'+reason+'**\n\n*–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - –õ–° –±–æ—Ç–∞*');
            });


          } else {
            let timeDiff = Math.round(Math.abs(cooldown - new Date().getTime() + JSON.parse(reply).last_update)/1000);
            //let diffDays = Math.ceil(timeDiff / 86400)-1;
            let diffHours = Math.ceil((timeDiff % 86400) / 3600)-1;
            let diffMinutes = Math.ceil((timeDiff % 3600) / 60)-1;
            message.reply('—Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–∞–Ω–≥–∞ –≤–æ–∑–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑: **'+diffHours+' —á. '+diffMinutes+' –º.**\n\n*–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - –õ–° –±–æ—Ç–∞*');
            console.log('[Registration] Cooldown dont expired!');
          }
        })
      });
    });
  }
});

bot.login(cfg.discord_token);